// --- Directions
// Print out the n-th entry in the fibonacci series.
// The fibonacci series is an ordering of numbers where
// each number is the sum of the preceeding two.
// For example, the sequence
//  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
// forms the first ten entries of the fibonacci series.
// Example:
//   fib(4) === 3

function fib(n) {
    // trick is to recognize that first two elements cannot be effectively generated by a for loop
    const result = [0, 1];
    for (let i = 2; i <= n; i++) {
        const a = result[result.length - 1];
        const b = result[result.length - 2];
        result.push(a + b)
    }
    return result[n];
}

function memoize(fn) {
    //declare an object that is going to store all of the calls to the fast version of our function
    //a record of all the previous calls to the function, and their results
    //keys of cache will be the arguments that we have tried to call slowFib with
    const cache = {}; 
    
    //this function will accept the arguments that were actually supposed to be called with the slowFib function
    //we don't know how many arguments will be called (if this is a general memoize function)
    // ...args, I don't know how many arguments, accept them all
    return function(...args) {
        if (cache[args]) {
            return cache[args];
        }
        //apply look at MDN
        const result = fn.apply(this, args);
        cache[args] = result;

        return result;
        
    }
}

function fib(n) {
    if ( n < 2 ) {
        return n;
    }
     // when you are recursively calling the function 
     // realize that you're calling the memoized version and not the original non-memoized version
    return fib(n - 1) + fib(n - 2);

}

fib = memoize(fib);

